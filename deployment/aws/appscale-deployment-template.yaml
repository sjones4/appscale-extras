---
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  AppScale per-deployment template, requires environment
Parameters:
  Label:
    Description: Short label for deployment
    Type: String
    AllowedPattern: "[A-Z][A-Za-z0-9 ]{2,32}"
    ConstraintDescription: >-
      Label must start with an uppercase character and may contain 32
      uppercase, lowercase, and numeric characters and spaces
  SubnetCidr:
    Description: CIDR for the deployment subnet
    Type: String
    Default: "10.4.16.0/20"
    AllowedValues:
      - "10.4.16.0/20"
      - "10.4.32.0/20"
      - "10.4.48.0/20"
      - "10.4.64.0/20"
      - "10.4.80.0/20"
      - "10.4.96.0/20"
      - "10.4.112.0/20"
      - "10.4.128.0/20"
      - "10.4.144.0/20"
      - "10.4.160.0/20"
      - "10.4.176.0/20"
      - "10.4.192.0/20"
      - "10.4.208.0/20"
      - "10.4.224.0/20"
      - "10.4.240.0/20"
Resources:
  # Network
  Subnet:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !ImportValue AppScaleVpcId
      CidrBlock: !Ref SubnetCidr
      Tags:
        - Key: Name
          Value: !Sub AppScale ${Label} Subnet
  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !ImportValue AppScaleVpcId
      Tags:
        - Key: Name
          Value: !Sub AppScale ${Label} Routes
  DefaultRoute:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !ImportValue AppScaleNatGatewayId
  SubnetRouteTableAssociation:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref Subnet
      RouteTableId: !Ref RouteTable
  NetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !ImportValue AppScaleVpcId
      Tags:
        - Key: Name
          Value: !Sub AppScale ${Label} Network ACL
  InboundSSHNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: "110"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: !ImportValue AppScaleVpcCidr
      PortRange:
        From: "22"
        To: "22"
  InboundHttpNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: "120"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: !ImportValue AppScaleVpcCidr
      PortRange:
        From: "80"
        To: "80"
  InboundHttpsNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: "130"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: !ImportValue AppScaleVpcCidr
      PortRange:
        From: "443"
        To: "443"
  InboundLowRegisteredNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: "140"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: !ImportValue AppScaleVpcCidr
      PortRange:
        From: "1024"
        To: "32767"
  InboundEphemeralNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: "200"
      Protocol: "6"
      RuleAction: allow
      Egress: "false"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "32768"
        To: "65535"
  OutboundNetworkAclEntry:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkAcl
      RuleNumber: "100"
      Protocol: "6"
      RuleAction: allow
      Egress: "true"
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: "0"
        To: "65535"
  SubnetNetworkAclAssociation:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref Subnet
      NetworkAclId: !Ref NetworkAcl
  # Service user
  AppScaleUser:
    Type: "AWS::IAM::User"
    Properties:
      Path: /appscale/
      Policies:
        - PolicyName: !Sub appscale-service-policy
          PolicyDocument: |
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ec2:Describe*",
                            "ec2:RunInstances",
                            "ec2:StartInstances",
                            "ec2:StopInstances",
                            "ec2:TerminateInstances",
                            "ec2:*Address",
                            "ec2:*KeyPair",
                            "ec2:*SecurityGroup*",
                            "ec2:AttachVolume",
                            "ec2:DetachVolume"
                        ],
                        "Resource": "*"
                    }
                ]
            }
Outputs:
  Zone:
    Description: AppScale deployment availability zone
    Value: !GetAtt Subnet.AvailabilityZone
  Vpc:
    Description: AppScale deployment vpc identifier
    Value: !GetAtt Subnet.VpcId
  Subnet:
    Description: AppScale deployment subnet identifier
    Value: !Ref Subnet
  UserName:
    Description: AppScale deployment user name (add access key for user)
    Value: !Ref AppScaleUser
  UserArn:
    Description: AppScale deployment user arn (add access key for user)
    Value: !GetAtt AppScaleUser.Arn

